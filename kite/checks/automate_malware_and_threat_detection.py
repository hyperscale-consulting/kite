"""Manual check for automated malware and threat detection using GuardDuty."""

from typing import Any

from kite.config import Config
from kite.data import get_ec2_instances
from kite.data import get_ecs_clusters
from kite.data import get_eks_clusters
from kite.data import get_guardduty_detectors
from kite.helpers import get_account_ids_in_scope
from kite.helpers import manual_check

CHECK_ID = "automate-malware-and-threat-detection"
CHECK_NAME = "Automate Malware and Threat Detection"

# Protection requirements by workload type
EC2_FEATURES = [
    "EBS_MALWARE_PROTECTION",
    "RUNTIME_MONITORING",
]
EC2_ADDITIONAL = [
    "EC2_AGENT_MANAGEMENT",
]
EKS_FEATURES = [
    "RUNTIME_MONITORING",
]
EKS_ADDITIONAL = [
    "EKS_ADDON_MANAGEMENT",
]
ECS_FEATURES = [
    "RUNTIME_MONITORING",
]
ECS_ADDITIONAL = [
    "ECS_FARGATE_AGENT_MANAGEMENT",
]


def _summarize_guardduty_runtime_features() -> str:
    summary = "GuardDuty Runtime Monitoring Protection Status (flagged only if workloads exist):\n\n"
    missing_protection = False
    for account_id in get_account_ids_in_scope():
        for region in Config.get().active_regions:
            detectors = get_guardduty_detectors(account_id, region)
            ec2s = get_ec2_instances(account_id, region) or []
            eks_clusters = get_eks_clusters(account_id, region) or []
            ecs_clusters = get_ecs_clusters(account_id, region) or []
            # Determine if any ECS cluster uses Fargate
            ecs_fargate = False
            for cluster in ecs_clusters:
                providers = cluster.get("capacityProviders", [])
                if "FARGATE" in providers or "FARGATE_SPOT" in providers:
                    ecs_fargate = True
                    break
            if not (ec2s or eks_clusters or ecs_fargate):
                continue  # No relevant workloads in this account/region
            if not detectors:
                summary += (
                    f"Account: {account_id}, Region: {region}\n"
                    "  - No GuardDuty detectors found (workloads present)\n"
                )
                missing_protection = True
                continue
            for detector in detectors:
                detector_missing = False
                detector_summary = f"Account: {account_id}, Region: {region}\n"
                features = {f["Name"]: f for f in detector.get("Features", [])}
                # EC2
                if ec2s:
                    for feat in EC2_FEATURES:
                        if features.get(feat, {}).get("Status") != "ENABLED":
                            detector_summary += (
                                f"  - {feat} not enabled (EC2 present)\n"
                            )
                            detector_missing = True
                    runtime = features.get("RUNTIME_MONITORING", {})
                    if runtime:
                        add_configs = {
                            c["Name"]: c
                            for c in runtime.get("AdditionalConfiguration", [])
                        }
                        for add in EC2_ADDITIONAL:
                            if add_configs.get(add, {}).get("Status") != "ENABLED":
                                detector_summary += (
                                    f"  - {add} not enabled (EC2 present)\n"
                                )
                                detector_missing = True
                # EKS
                if eks_clusters:
                    for feat in EKS_FEATURES:
                        if features.get(feat, {}).get("Status") != "ENABLED":
                            detector_summary += (
                                f"  - {feat} not enabled (EKS present)\n"
                            )
                            detector_missing = True
                    runtime = features.get("RUNTIME_MONITORING", {})
                    if runtime:
                        add_configs = {
                            c["Name"]: c
                            for c in runtime.get("AdditionalConfiguration", [])
                        }
                        for add in EKS_ADDITIONAL:
                            if add_configs.get(add, {}).get("Status") != "ENABLED":
                                detector_summary += (
                                    f"  - {add} not enabled (EKS present)\n"
                                )
                                detector_missing = True
                # ECS (only if Fargate)
                if ecs_fargate:
                    for feat in ECS_FEATURES:
                        if features.get(feat, {}).get("Status") != "ENABLED":
                            detector_summary += (
                                f"  - {feat} not enabled (ECS Fargate present)\n"
                            )
                            detector_missing = True
                    runtime = features.get("RUNTIME_MONITORING", {})
                    if runtime:
                        add_configs = {
                            c["Name"]: c
                            for c in runtime.get("AdditionalConfiguration", [])
                        }
                        for add in ECS_ADDITIONAL:
                            if add_configs.get(add, {}).get("Status") != "ENABLED":
                                detector_summary += (
                                    f"  - {add} not enabled (ECS Fargate present)\n"
                                )
                                detector_missing = True
                if detector_missing:
                    summary += detector_summary
                    missing_protection = True
    if not missing_protection:
        summary += "All required GuardDuty protections are enabled for all workloads present.\n"
    return summary


def automate_malware_and_threat_detection() -> dict[str, Any]:
    """
    Manual check to confirm if tools such as GuardDuty are used to automate malware
    and threat detection. Only flags missing protection if workloads of that type exist.
    """
    message = (
        "Please review the GuardDuty runtime monitoring protection status below. "
        "Missing protection is only flagged if relevant workloads exist in the account/region.\n\n"
    )
    summary = _summarize_guardduty_runtime_features()
    message += summary
    message += (
        "\nAre tools such as GuardDuty used to automate malware and threat detection?"
    )
    return manual_check(
        check_id=CHECK_ID,
        check_name=CHECK_NAME,
        message=message,
        prompt="Are tools such as GuardDuty used to automate malware and threat detection?",
        pass_message="Tools such as GuardDuty are used to automate malware and threat detection.",
        fail_message="Tools such as GuardDuty should be used to automate malware and threat detection.",
        default=True,
    )


automate_malware_and_threat_detection._CHECK_ID = CHECK_ID

automate_malware_and_threat_detection._CHECK_NAME = CHECK_NAME
